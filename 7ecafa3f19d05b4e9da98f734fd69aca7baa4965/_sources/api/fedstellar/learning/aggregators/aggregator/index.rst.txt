:py:mod:`fedstellar.learning.aggregators.aggregator`
====================================================

.. py:module:: fedstellar.learning.aggregators.aggregator


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fedstellar.learning.aggregators.aggregator.Aggregator



Functions
~~~~~~~~~

.. autoapisummary::

   fedstellar.learning.aggregators.aggregator.create_malicious_aggregator



.. py:class:: Aggregator(node_name='unknown', config=None)


   Class to manage the aggregation of models. It is a thread so, aggregation will be done in background if all models were added or timeouts have gone.
   Also, it is an observable so, it will notify the node when the aggregation was done.

   :param node_name: (str): String with the name of the node.

   .. py:method:: aggregate(models)

      Aggregate the models.


   .. py:method:: set_nodes_to_aggregate(l)

      List with the name of nodes to aggregate. Be careful, by setting new nodes, the actual aggregation will be lost.

      :param l: List of nodes to aggregate. Empty for no aggregation.

      :raises Exception: If the aggregation is running.


   .. py:method:: set_waiting_aggregated_model(nodes)

      Indicates that the node is waiting for an aggregation. It won't participate in aggregation process.
      The model only will receive a model, and then it will be used as an aggregated model.


   .. py:method:: clear()

      Clear the aggregation (remove train set and release locks).


   .. py:method:: get_aggregated_models()

      Get the list of aggregated models.

      :returns: Name of nodes that collaborated to get the model.


   .. py:method:: get_aggregated_models_weights()


   .. py:method:: add_model(model, contributors, weight, source=None)

      Add a model. The first model to be added starts the `run` method (timeout).

      :param model: Model to add.
      :param contributors: Nodes that collaborated to get the model.
      :param weight: Number of samples used to get the model.


   .. py:method:: wait_and_get_aggregation()

      Wait for aggregation to finish.

      :returns: Aggregated model.

      :raises Exception: If waiting for an aggregated model and several models were received.


   .. py:method:: get_partial_aggregation(except_nodes)

      Obtain a partial aggregation.

      :param except_nodes: List of nodes to exclude from the aggregation.
      :type except_nodes: list

      :returns: Aggregated model, nodes aggregated and aggregation weight.



.. py:function:: create_malicious_aggregator(aggregator, attack)


