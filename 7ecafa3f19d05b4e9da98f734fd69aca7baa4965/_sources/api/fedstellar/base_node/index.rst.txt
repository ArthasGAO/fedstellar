:py:mod:`fedstellar.base_node`
==============================

.. py:module:: fedstellar.base_node


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fedstellar.base_node.BaseNode




.. py:class:: BaseNode(experiment_name, hostdemo=None, host='127.0.0.1', port=None, encrypt=False, config=None)


   Bases: :py:obj:`fedstellar.proto.node_pb2_grpc.NodeServicesServicer`

   This class represents a base node in the network (without **FL**). It is a thread, so it's going to process all messages in a background thread using the CommunicationProtocol.

   :param host: The host of the node.
   :type host: str
   :param port: The port of the node.
   :type port: int
   :param simulation: If False, communication will be encrypted.
   :type simulation: bool

   .. attribute:: host

      The host of the node.

      :type: str

   .. attribute:: port

      The port of the node.

      :type: int

   .. attribute:: simulation

      If the node is in simulation mode or not. Basically, simulation nodes don't have encryption and metrics aren't sent to network nodes.

      :type: bool

   .. attribute:: heartbeater

      The heartbeater of the node.

      :type: Heartbeater

   .. attribute:: gossiper

      The gossiper of the node.

      :type: Gossiper

   .. py:method:: get_addr()

      :returns: The address of the node.
      :rtype: tuple


   .. py:method:: get_name()

      :returns: The name of the node.
      :rtype: str


   .. py:method:: get_name_demo()

      :returns: The name of the node.
      :rtype: str


   .. py:method:: setup_logging(log_dir)


   .. py:method:: assert_running(running)

      Asserts that the node is running or not running.

      :param running: True if the node must be running, False otherwise.
      :type running: bool

      :raises Exception: If the node is not running and running is True, or if the node is running and running is False.


   .. py:method:: start(wait=False)

      Starts the node: server and neighbors(gossip and heartbeat).

      :param wait: If True, the function will wait until the server is terminated.
      :type wait: bool

      :raises Exception: If the node is already running.


   .. py:method:: stop()

      Stops the node: server and neighbors(gossip and heartbeat).

      :raises Exception: If the node is not running.


   .. py:method:: connect(addr)

      Connects a node to another.

      :param addr: The address of the node to connect to.
      :type addr: str

      :returns: True if the node was connected, False otherwise.
      :rtype: bool


   .. py:method:: get_neighbors(only_direct=False)

      Returns the neighbors of the node.

      :param only_direct: If True, only the direct neighbors will be returned.
      :type only_direct: bool

      :returns: The list of neighbors.
      :rtype: list


   .. py:method:: disconnect_from(addr)

      Disconnects a node from another.

      :param addr: The address of the node to disconnect from.
      :type addr: str


   .. py:method:: handshake(request, _)

      GRPC service. It is called when a node connects to another.


   .. py:method:: disconnect(request, _)

      GRPC service. It is called when a node disconnects from another.


   .. py:method:: send_message(request, _)

      GRPC service. It is called when a node sends a message to another.
      More in detail, it is called when a neighbor use your stub to send a message to you.
      Then, you process the message and gossip it to your neighbors.


   .. py:method:: add_model(request, _)
      :abstractmethod:

      Missing associated documentation comment in .proto file.


   .. py:method:: add_message_handler(cmd, callback)

      Adds a function callback to a message.

      :param cmd: The command of the message.
      :type cmd: str
      :param callback: The callback function.
      :type callback: function



