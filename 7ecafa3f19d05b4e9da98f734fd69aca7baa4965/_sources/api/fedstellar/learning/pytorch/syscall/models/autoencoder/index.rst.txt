:py:mod:`fedstellar.learning.pytorch.syscall.models.autoencoder`
================================================================

.. py:module:: fedstellar.learning.pytorch.syscall.models.autoencoder


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fedstellar.learning.pytorch.syscall.models.autoencoder.SyscallModelAutoencoder




.. py:class:: SyscallModelAutoencoder(in_channels=17, out_channels=9, learning_rate=0.01, metrics=None, confusion_matrix=None, seed=None)


   Bases: :py:obj:`lightning.LightningModule`

   LightningModule for Syscall dataset.

   .. py:method:: process_metrics(phase, y_pred, y, loss=None)

      Calculate and log metrics for the given phase.
      :param phase: One of 'Train', 'Validation', or 'Test'
      :type phase: str
      :param y_pred: Model predictions
      :type y_pred: torch.Tensor
      :param y: Ground truth labels
      :type y: torch.Tensor
      :param loss: Loss value
      :type loss: torch.Tensor, optional


   .. py:method:: log_metrics_by_epoch(phase, print_cm=False, plot_cm=False)

      Log all metrics at the end of an epoch for the given phase.
      :param phase: One of 'Train', 'Validation', or 'Test'
      :type phase: str
      :param : param phase:
      :param : param plot_cm:


   .. py:method:: encode(x)


   .. py:method:: decode(x)


   .. py:method:: forward(x)


   .. py:method:: configure_optimizers()


   .. py:method:: step(batch, phase)


   .. py:method:: training_step(batch, batch_id)

      Training step for the model.
      :param batch:
      :param batch_id:

      Returns:


   .. py:method:: on_train_epoch_end()


   .. py:method:: validation_step(batch, batch_idx)

      Validation step for the model.
      :param batch:
      :param batch_idx:

      Returns:


   .. py:method:: on_validation_epoch_end()


   .. py:method:: test_step(batch, batch_idx)

      Test step for the model.
      :param batch:
      :param batch_idx:

      Returns:


   .. py:method:: on_test_epoch_end()



