:py:mod:`fedstellar.node`
=========================

.. py:module:: fedstellar.node


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fedstellar.node.Node
   fedstellar.node.MaliciousNode




.. py:class:: Node(idx, experiment_name, model, data, hostdemo=None, host='127.0.0.1', port=None, config=Config, learner=LightningLearner, encrypt=False, model_poisoning=False, poisoned_ratio=0, noise_type='gaussian')


   Bases: :py:obj:`fedstellar.base_node.BaseNode`

   Class based on a base node that allows **FEDERATED LEARNING**.

   Metrics will be saved under a folder with the name of the node.

   :param model: Model to be learned. Careful, model should be compatible with data and the learner.
   :param data: Dataset to be used in the learning process. Careful, model should be compatible with data and the learner.
   :param host: Host where the node will be listening.
   :type host: str
   :param port: Port where the node will be listening.
   :type port: int
   :param learner: Learner to be used in the learning process. Default: LightningLearner.
   :type learner: NodeLearner
   :param simulation: If True, the node will be simulated. Default: True.
   :type simulation: bool
   :param encrypt: If True, node will encrypt the communications. Default: False.
   :type encrypt: bool

   .. attribute:: round

      Round of the learning process.

      :type: int

   .. attribute:: totalrounds

      Total number of rounds of the learning process.

      :type: int

   .. attribute:: learner

      Learner to be used in the learning process.

      :type: NodeLearner

   .. attribute:: aggregator

      Aggregator to be used in the learning process.

      :type: Aggregator

   .. py:method:: add_model(request, _)

      GRPC service. It is called when a node wants to add a model to the network.


   .. py:method:: handshake(request, _)

      GRPC service. It is called when a node connects to another.


   .. py:method:: connect(addr)

      Connects a node to another. If learning is running, connections are not allowed.

      :param addr: Address of the node to connect to.
      :type addr: str

      :returns: True if the connection was successful, False otherwise.
      :rtype: bool


   .. py:method:: stop()

      Stops the node. If learning is running, the local learning process is interrupted.


   .. py:method:: set_data(data)

      Set the data to be used in the learning process (by the learner).

      :param data: Dataset to be used in the learning process.


   .. py:method:: set_model(model)

      Set the model to be used in the learning process (by the learner).

      :param model: Model to be used in the learning process.


   .. py:method:: set_start_learning(rounds=1, epochs=1)

      Start the learning process in the entire network.

      :param rounds: Number of rounds of the learning process.
      :param epochs: Number of epochs of the learning process.


   .. py:method:: set_stop_learning()

      Stop the learning process in the entire network.


   .. py:method:: reputation_calculation(aggregated_models_weights)


   .. py:method:: send_reputation(malicious_nodes)


   .. py:method:: get_aggregated_models(node)

      Get the models that have been aggregated by a given node in the actual round.

      :param node: Node to get the aggregated models from.
      :type node: str



.. py:class:: MaliciousNode(idx, experiment_name, model, data, hostdemo=None, host='127.0.0.1', port=None, config=Config, learner=LightningLearner, encrypt=False, model_poisoning=False, poisoned_ratio=0, noise_type='gaussian')


   Bases: :py:obj:`Node`

   Class based on a base node that allows **FEDERATED LEARNING**.

   Metrics will be saved under a folder with the name of the node.

   :param model: Model to be learned. Careful, model should be compatible with data and the learner.
   :param data: Dataset to be used in the learning process. Careful, model should be compatible with data and the learner.
   :param host: Host where the node will be listening.
   :type host: str
   :param port: Port where the node will be listening.
   :type port: int
   :param learner: Learner to be used in the learning process. Default: LightningLearner.
   :type learner: NodeLearner
   :param simulation: If True, the node will be simulated. Default: True.
   :type simulation: bool
   :param encrypt: If True, node will encrypt the communications. Default: False.
   :type encrypt: bool

   .. attribute:: round

      Round of the learning process.

      :type: int

   .. attribute:: totalrounds

      Total number of rounds of the learning process.

      :type: int

   .. attribute:: learner

      Learner to be used in the learning process.

      :type: NodeLearner

   .. attribute:: aggregator

      Aggregator to be used in the learning process.

      :type: Aggregator


